from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
from telegram import ReactionTypeEmoji
import asyncio
import random

TOKEN = ''

BOT_USERNAME = "@FishRunGamesBot"

tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")

chat_history_ids = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_history_ids
    chat_history_ids = None
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å DialoGPT. –ù–∞—á–Ω–µ–º –¥–∏–∞–ª–æ–≥!')


async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_history_ids
    print("chat update")

    if update.message.chat.type in ["group", "supergroup"]:
        if not update.message.text:
            return
        user_message = update.message.text.replace(BOT_USERNAME, "").strip()
    else:
        user_message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É (–¥–ª—è –≥—Ä—É–ø–ø)
    is_directed_to_bot = (
            update.message.chat.type in ["private"] or
            (update.message.chat.type in ["group", "supergroup"] and
             BOT_USERNAME.lower() in update.message.text.lower())
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
    if "good luck" in user_message.lower():
        await asyncio.sleep(random.uniform(2, 5))
        await update.message.set_reaction([ReactionTypeEmoji('üëç')], is_big=False)
    elif "love" in user_message.lower():
        await asyncio.sleep(random.uniform(2, 5))
        await update.message.set_reaction([ReactionTypeEmoji('‚ù§Ô∏è')], is_big=False)


    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –∫ –±–æ—Ç—É - 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if not is_directed_to_bot and random.random() > 0.3:
        return

    new_user_input_ids = tokenizer.encode(user_message + tokenizer.eos_token, return_tensors='pt')

    bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids],
                              dim=-1) if chat_history_ids is not None else new_user_input_ids

    chat_history_ids = model.generate(bot_input_ids, max_length=1000, pad_token_id=tokenizer.eos_token_id)

    bot_response = tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70%
    if random.random() < 0.7:
        emoji = random.choice(['üëÄ', 'ü§î', 'üòÇ'])
        bot_response = f"{bot_response} {emoji}"

    await update.message.chat.send_chat_action("typing")
    await asyncio.sleep(random.uniform(2, 5))
    await update.message.reply_text(bot_response)


def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    application.run_polling()

if __name__ == '__main__':
    main()